; // PIO program to implement AD7699 communication
.program ad7699_spi

.side_set 1 opt    ; For SCK pin
.define CNV_PIN 9


.wrap_target
    pull block       side 0   ; Wait for configuration data
    set pins, 0             ; Set CNV low
    wait 0 GPIO CNV_PIN  ; Wait for CNV low to start conversion
    nop [3]            ; Wait >30ns for conversion to start
    
    ; set x, 15          ; 16-bit counter (0-15)
    set x, 2            ; MIGHT have to be 1, might need another way
bitloop:
    out pins, 1    [2] side 1    ; Output MOSI bit
    in pins, 1      ;[2] side 0  ; Sample MISO (on same cycle as MOSI)
    jmp !OSRE bitloop [1] side 0   ; checks if OSR is empty, if not empty branch to bitloop
    jmp tmp_jmp

in_loop2:
    in pins, 1      [2]  side 0 ; Sample MISO (on same cycle as MOSI)
tmp_jmp:
    jmp x-- in_loop2  [2] side 1 ; Loop for all 16 bits

    nop [4]
    set pins, 1       ; Pull CNV high to end conversion
    ; in y, 16            ; transfers the y scratch register to ISR to be pushed out
    in null, 16         ; adds 16 0s right of the LSB so our data can be left-shifted out properly
    push block         ; Push received 16-bit data
.wrap
